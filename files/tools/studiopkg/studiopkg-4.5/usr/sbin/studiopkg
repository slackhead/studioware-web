#!/bin/sh

#{{{ Copyright
# Studioware package install script
# Copyright 2011 David Woodfall <dave@dawoodfall.net>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#}}}
#{{{ Init 
init()
{
    APPNAME="studiopkg"
    VERSION="4.5b1"
    TMPROOT=$(mktemp -d -p /tmp $APPNAME-XXXXXX) || exit
    echo "Using $TMPROOT"
    trap "cleanup" HUP INT ABRT QUIT SEGV TERM KILL PIPE STOP TSTP
    
    case "$( uname -m )" in
        i?86) ARCH="" ;;
        x86_64) ARCH=64 ;;
    esac

    QUEUE=$TMPROOT/queue
    PKGLIST=$TMPROOT/pkglist
    WGET="wget --no-check-certificate"
    INSTALL="upgradepkg --reinstall --install-new"
    CONFDIR=/etc/$APPNAME/
    mkdir -p $CONFDIR
    CONF=$CONFDIR$APPNAME.conf
    touch $CONF
    source $CONF
    if [ -z "$CHECKGPG" ]; then
        echo "CHECKGPG not set in $CONF..."
        echo "Setting to ON. You can change this later by editing $CONF"
        echo "CHECKGPG=ON" >> $CONF
        CHECKGPG="ON"
        echo -n "Press enter to continue"
        read <&1
    fi
    MAINURL="http://www.studioware.org"
    TOOLURL="$MAINURL/files/tools/$APPNAME"
    PKGSERVER="$MAINURL/files/packages/slackware$ARCH-$SWVERSION"
    SBSERVER="$MAINURL/files/slackbuilds/$SWVERSION"
    CACHEDIR=/var/cache/$APPNAME/$SWVERSION
    mkdir -p $CACHEDIR
    FILELIST=$CACHEDIR/FILELIST.TXT
    CHECKSUMS=$CACHEDIR/CHECKSUMS.md5
    STUDIOKEY="Studioware <info@studioware.org>"
    GPG="gpg --verify --trust-model always"
}
#}}}
#{{{ Cleanup and exit
cleanup()
{
    rm -rf $TMPROOT
    exit 
}
#}}}
#{{{ Flags
getflags()
{
    if [ "$1" = "update" ]; then { update; cleanup; }; fi
    if [ "$1" = "-u" ]; then { update; cleanup; }; fi
    if [ "$1" = "search" ]; then { search "$@"; cleanup; }; fi
    if [ "$1" = "-s" ]; then { search "$@"; cleanup; }; fi
    if [ "$1" = "install" ]; then { install "$@"; cleanup; }; fi
    if [ "$1" = "-i" ]; then { install "$@"; cleanup; }; fi
    if [ "$1" = "install-all" ]; then { installall "$@"; cleanup; }; fi
    if [ "$1" = "remove" ]; then { remove "$@"; cleanup; }; fi
    if [ "$1" = "-r" ]; then { remove "$@"; cleanup; }; fi
    if [ "$1" = "upgrade" ]; then { upgrade "$@"; cleanup; }; fi
    if [ "$1" = "-up" ]; then { upgrade "$@"; cleanup; }; fi
    if [ "$1" = "upgrade-all" ]; then { upgradeall; cleanup; }; fi
    if [ "$1" = "-upall" ]; then { upgradeall; cleanup; }; fi
    if [ "$1" = "clean-system" ]; then { cleansystem; cleanup; }; fi
    if [ "$1" = "clean" ]; then { cleansystem; cleanup; }; fi
    if [ "$1" = "delete-cache" ]; then { deletecache; cleanup; }; fi
    if [ "$1" = "latest" ]; then { latest; cleanup; }; fi
    if [ "$1" = "-g" ]; then { importgpg; cleanup; }; fi
    if [ "$1" = "gpg" ]; then { importgpg; cleanup; }; fi
    if [ "$1" = "-l" ]; then { latest; cleanup; }; fi
    if [ "$1" = "-q" ]; then { get_queue $2; cleanup; }; fi
    if [ "$1" = "queue" ]; then { get_queue $2; cleanup; }; fi
    if [ "$1" = "-h" ]; then {  usage; cleanup; }; fi
    if [ "$1" = "-v" ]; then { echo $APPNAME $VERSION; cleanup; }; fi
}
#}}}
#{{{ latest
latest()
{
    cd $TMPROOT
    
    LATEST=$(curl -s $TOOLURL/LATEST)
    REMVERS=$(echo $LATEST | cut -db -f1)
    REMBUILD=$(echo $LATEST | cut -db -f2)

    PKG=$APPNAME-$REMVERS-noarch-${REMBUILD}daw.txz
    ASC=$APPNAME-$REMVERS-noarch-${REMBUILD}daw.txz.asc
    MD5=$APPNAME-$REMVERS-noarch-${REMBUILD}daw.md5

    echo "Installed version: $VERSION. Latest version: $LATEST."

    if [ "$VERSION" != "$LATEST" ]; then
        echo -n "Newer version available. Download it? (y/n) "
        read REPLY

        if [ "$REPLY" = "y" ]; then
            $WGET -q -O $PKG $TOOLURL/$PKG
            $WGET -q -O $MD5 $TOOLURL/$MD5
            $WGET -q -O $ASC $TOOLURL/$ASC

            echo "Package saved to $TMPROOT"
            echo "Checking md5... "

            md5sum -c $MD5

            if [ $? != 0 ]; then
                cleanup
            fi

            if [ "$CHECKGPG" = "ON" ]; then
                echo "Checking gpg..."
                # try to surpress the authority warning...
                GPGOUT=$($GPG $ASC $PKG 2>&1 | head -n2)

                if [ -n "$(echo $GPGOUT | grep -i 'not found')" ]; then
                    echo "$GPGOUT"
                    echo "Did you import the Studioware key with 'studiopkg -g|gpg'?"
                    cleanup
                elif [ -n "$(echo $GPGOUT | grep -i 'bad signature')" ]; then
                        echo "$GPGOUT"
                        cleanup
                else
                    echo "$GPGOUT"
                fi
            fi


            echo
            echo -n "Upgrade now? (y/n) "
            read REPLY
            if [ "$REPLY" = "y" ]; then
                $INSTALL $PKG
            fi
        fi
    fi
}
# }}}
#{{{ Usage
usage()
{
cat << EOF
$APPNAME $VERSION

Options

$APPNAME clean-system/clean - remove all studioware packages dialog
$APPNAME delete-cache - delete all cached packages
$APPNAME install/-i package1 package2 ... - install packages
$APPNAME install/-i < <queuefile> - install packages from file
$APPNAME install-all - install all packages
$APPNAME latest/-l - checks for latest version of $APPNAME
$APPNAME remove/-r <package> - remove package
$APPNAME search/-s - search for package name or part name
$APPNAME update/-u - syncs with file server
$APPNAME upgrade/-up <package> - upgrade package
$APPNAME upgrade-all/-upall - upgrade all packages
$APPNAME queue/-q <package> - download and install queue from file server
$APPNAME -h - help
$APPNAME -v - give version and exit

Files

/etc/$APPNAME/$APPNAME.conf

This file contains the mirror URL and should be edited for 32bit or 64bit.
EOF
}
#}}}
#{{{ Update
update()
{   
    cd $CACHEDIR || cleanup
    $WGET -O FILELIST.TXT $PKGSERVER/FILELIST.TXT
    $WGET -O CHECKSUMS.md5 $PKGSERVER/CHECKSUMS.md5
    cleanup
}
#}}}
#{{{ Download Queue
get_queue()
{
    cd $CACHEDIR || { echo "No cache exists! Did you run update?"; cleanup; }

    if [ ! -r $FILELIST ]; then { echo "No filelist! Did you run update?"; \
        cleanup; } fi

    CAT=$(grep -i $1-[^-]*-[^-]*-[^-]*txz$ $FILELIST | cut -d/ -f2)

    curl -fs $SBSERVER/$CAT/$1/$1.sqf > $QUEUE 

    if [ $? != 0 ]; then
        curl -fs $SBSERVER/$1.sqf > $QUEUE 

        if [ $? != 0 ]; then
            echo "Queue not found."
            cleanup
        fi
    fi

    listpkgs
}
#}}}
#{{{ List Packages
listpkgs()
{
    exec <&1
    unset pkgs
    unset INSTALLLIST
    unset MISSING

    while read line
    do
        name=$(echo $line | awk '{print $1}')
        pkg=$(grep -i /$name-[^-]*-[^-]*-[^-]*txz$ $FILELIST | cut -d/ -f3)
        if [ -n "$pkg" ]; then
            INSTALLLIST=$INSTALLLIST" "$pkg" "$name" ""on "
        else
            MISSING=$MISSING" "$name
        fi
    done < $QUEUE

    if [ -n "$MISSING" ]; then
        echo "The following are in the queue, but not in the file list:"
        echo $MISSING
        sleep 5
    fi

    if [ -z "$INSTALLLIST" ]; then cleanup; fi

    dialog --separate-output --title install --backtitle "$APPNAME $VERSION" \
        --checklist "Choose packages to install:" \
        19 70 13 $INSTALLLIST 2>$PKGLIST

    if [ $? -ne 0 ]; then cleanup; fi
    if [ -z "$(cat $PKGLIST)" ]; then cleanup; fi

    installpkgs
}
#}}}
#{{{ Install
install()
{
    cd $CACHEDIR || { echo "No cache exists! Did you run update?"; cleanup; }
    if [ ! -r $FILELIST ]; then { echo "No filelist! Did you run update?"; \
        cleanup; } fi

    unset pkgs
    shift

    cl=$*
    if [ -z "$cl" ]; then
        cat /dev/stdin | sed 's/,/\n/g;/^$/d' > $QUEUE
    else
        echo $cl | sed 's/,/\n/g;/^$/d' > $QUEUE
    fi
    exec <&1

    while read line
    do
        name=$(echo $line | awk '{print $1}')
        pkg=$(grep -i $name-[^-]*-[^-]*-[^-]*txz$ $FILELIST | cut -d/ -f3)
        INSTALLLIST=$INSTALLLIST" "$pkg" "$name" ""on "
    done < $QUEUE

    if [ -z "$INSTALLLIST" ]; then cleanup; fi

    let rows=$(stty size | cut -f1 -d' ')-4
    let cols=$(stty size | cut -f2 -d' ')
    let mrows=$((rows-6))

    dialog --separate-output --title install --backtitle "$APPNAME $VERSION" \
        --checklist "Choose packages to install:" \
        $rows $cols $mrows $INSTALLLIST 2> $TMPROOT/pkglist
    if [ $? -ne 0 ]; then cleanup; fi
    if [ -z "$(cat $TMPROOT/pkglist)" ]; then cleanup; fi
    installpkgs
}
#}}}
#{{{ Install Everything
installall()
{
    cd $CACHEDIR || { echo "No cache exists! Did you run update?"; cleanup; }
    if [ ! -r $FILELIST ]; then { echo "No filelist! Did you run update?"; \
        cleanup; } fi

    unset pkgs

    exec <&1
    while read line
    do
        name=$(echo $line | egrep .*txz$ | cut -d'/' -f3)
        if [ -n "$name" ]; then
            pkgs=$pkgs" "$name
        fi
    done < $FILELIST

    for i in $pkgs
    do
        shortname=$(echo $i | rev | cut -d- -f4- | rev)
        version=$(echo $i | rev | cut -d- -f3 | rev)
        installed=$(ls /var/log/packages/$shortname* 2>/dev/null | grep $version)

        if [ -n "$i" ] && [ -z "$installed" ]; then
            INSTALLLIST=$INSTALLLIST" "$i" "$shortname" ""on "
        fi
    done

    if [ -z "$INSTALLLIST" ]; then cleanup; fi

    let rows=$(stty size | cut -f1 -d' ')-4
    let cols=$(stty size | cut -f2 -d' ')
    let mrows=$((rows-6))

    dialog --separate-output --title install --backtitle "$APPNAME $VERSION" \
        --checklist "Choose packages to install:" $rows $cols $mrows \
        $INSTALLLIST 2> $PKGLIST
    if [ $? -ne 0 ]; then cleanup; fi
    if [ -z "$(cat $PKGLIST)" ]; then cleanup; fi

    installpkgs
}
##}}}
#{{{ Remove
remove()
{
    shift
    cl=$*

    for i in $cl
    do
        pkgs=$pkgs" $(ls /var/log/packages/$i*se 2>/dev/null)"
    done

    for i in $pkgs
    do
        shortname=$(basename $i | rev | cut -d- -f4- | rev)
        if [ -n "$i" ]; then
            RMLIST=$RMLIST" "$(basename $i)" "$shortname" ""on "
        fi
    done

    if [ -z "$RMLIST" ]; then cleanup; fi

    let rows=$(stty size | cut -f1 -d' ')-4
    let cols=$(stty size | cut -f2 -d' ')
    let mrows=$((rows-6))

    dialog --separate-output --title install --backtitle "$APPNAME $VERSION" \
        --checklist "Choose packages to remove:" \
        $rows $cols $mrows $RMLIST 2> $PKGLIST
    if [ $? -ne 0 ]; then cleanup; fi
    if [ -z "$(cat $PKGLIST)" ]; then cleanup; fi
    for i in "$(cat $PKGLIST)"
    do
        removepkg $i
    done
}
#}}}
#{{{ clean-system
cleansystem()
{
    pkgs=$pkgs" $(ls /var/log/packages/*se 2>/dev/null)"

    for i in $pkgs
    do
        shortname=$(basename $i | rev | cut -d- -f4- | rev)
        if [ -n "$i" ]; then
            RMLIST=$RMLIST" "$(basename $i)" "$shortname" ""on "
        fi
    done

    if [ -z "$RMLIST" ]; then cleanup; fi

    let rows=$(stty size | cut -f1 -d' ')-4
    let cols=$(stty size | cut -f2 -d' ')
    let mrows=$((rows-6))

    dialog --separate-output --title install --backtitle "$APPNAME $VERSION" \
        --checklist "Choose packages to remove:" \
        $rows $cols $mrows $RMLIST 2> $PKGLIST
    if [ $? -ne 0 ]; then cleanup; fi
    if [ -z "$(cat $PKGLIST)" ]; then cleanup; fi
    for i in "$(cat $PKGLIST)"
    do
        removepkg $i
    done
}
#}}}
#{{{ Upgrade 
upgrade()
{
    cd $CACHEDIR || { echo "No cache exists! Did you run update?"; cleanup; }
    if [ ! -r $FILELIST ]; then { echo "No filelist! Did you run update?"; \
            cleanup; } fi
    shift

    for i in $*
    do
        sepkgs="$sepkgs $(ls -1 /var/log/packages/$i*se 2>/dev/null)"
    done

    jack=$(echo "$sepkgs" | grep jack | rev | cut -d- -f4- | rev)
    jackold=$(echo "$sepkgs" | grep jack-audio-connection-kit \
        | rev | cut -d- -f4- | rev)

    if [ "$jack" = "jack" ] && [ -n "$jackold" ]; then 
        echo "You have two versions of jack installed. You need to remove one."
        cleanup
    fi

    if [ -z "$sepkgs" ]; then { echo "No packages to upgrade"; cleanup; } fi

    for pkg in $sepkgs
    do
        shortname=$(basename $pkg | rev | cut -d- -f4- | rev)
        iversion=$(basename $pkg | rev | cut -d- -f1- | rev)
        nversion="$(grep -i $shortname $FILELIST | awk '{print $9}' | \
            cut -d'/' -f3 | sed 's/\.txz//' | rev \
            | cut -d- -f1- | rev)"
        for i in $nversion
        do
            newshortname=$(echo $i | rev | cut -d- -f4- | rev)

            if [ "$iversion" != "$i" ] && [ -n "$shortname" ] \
                && [ "$newshortname" = "$shortname" ]; then
                UPLIST=$UPLIST" "$i" "$shortname" ""on "
            fi
        done
    done

    if [ -z "$UPLIST" ]; then { echo "No packages to upgrade"; cleanup; } fi

    let rows=$(stty size | cut -f1 -d' ')-4
    let cols=$(stty size | cut -f2 -d' ')
    let mrows=$((rows-6))

    dialog --separate-output --title upgrade-all --backtitle "$APPNAME $VERSION" \
        --checklist "Choose packages to upgrade:" \
        $rows $cols $mrows $UPLIST 2>$PKGLIST
    if [ $? -ne 0 ]; then cleanup; fi
    if [ -z "$(cat $PKGLIST)" ]; then cleanup; fi

    installpkgs
}
#}}}
#{{{ Upgrade All
upgradeall()
{
    cd $CACHEDIR || { echo "No cache exists! Did you run update?"; cleanup; }
    if [ ! -r $FILELIST ]; then { echo "No filelist! Did you run update?"; \
            cleanup; } fi
    echo "Looking for packages to upgrade..."

    sepkgs="$(ls -1 /var/log/packages/*se 2>/dev/null)"
    jack=$(echo "$sepkgs" | grep jack | rev | cut -d- -f4- | rev)
    jackold=$(echo "$sepkgs" | grep jack-audio-connection-kit \
        | rev | cut -d- -f4- | rev)

    if [ "$jack" = "jack" ] && [ -n "$jackold" ]; then 
        echo "You have two versions of jack installed. You need to remove one."
        cleanup
    fi

    if [ -z "$sepkgs" ]; then { echo "No packages to upgrade"; cleanup; } fi

    for pkg in $sepkgs
    do
        shortname=$(basename $pkg | rev | cut -d- -f4- | rev)
        iversion=$(basename $pkg | rev | cut -d- -f1- | rev)
        nversion="$(grep -i $shortname $FILELIST | awk '{print $9}' | \
            cut -d'/' -f3 | sed 's/\.txz//' | rev \
            | cut -d- -f1- | rev)"
        for i in $nversion
        do
            newshortname=$(echo $i | rev | cut -d- -f4- | rev)

            if [ "$iversion" != "$i" ] && [ -n "$shortname" ] \
                && [ "$newshortname" = "$shortname" ]; then
                UPLIST=$UPLIST" "$i" "$shortname" ""on "
            fi
        done
    done

    if [ -z "$UPLIST" ]; then { echo "No packages to upgrade"; cleanup; } fi

    let rows=$(stty size | cut -f1 -d' ')-4
    let cols=$(stty size | cut -f2 -d' ')
    let mrows=$((rows-6))

    dialog --separate-output --title upgrade-all --backtitle "$APPNAME $VERSION" \
        --checklist "Choose packages to upgrade:" \
        $rows $cols $mrows $UPLIST 2>$PKGLIST
    if [ $? -ne 0 ]; then cleanup; fi
    if [ -z "$(cat $PKGLIST)" ]; then cleanup; fi

    installpkgs
}
#}}}
#{{{ Install Packages
installpkgs()
{
    exec <&1

    while read TXZ
    do
        REMOTE=$(grep .*$TXZ$ $FILELIST | awk '{print $9}' | cut -d'/' -f2-)
        let exit=99

        while [[ $exit -ne 0 ]]
        do
            $WGET -O $TXZ.md5 $PKGSERVER/$REMOTE.md5
            $WGET -O $TXZ.asc $PKGSERVER/$REMOTE.asc

            if [ ! -r "$TXZ" ]; then
                $WGET -O $TXZ $PKGSERVER/$REMOTE
            fi

            echo "Checksum..."
            md5sum -c $TXZ.md5
            let exit=$?

            if [ $exit -ne 0 ]; then 
                echo "Checksums don't match. Did you run '-u|update' first?"
                echo "You may need to delete the cache."
                echo -n "(r)edownload, (a)bort or (c)ontinue? "
                read ANS <&1

                if [ "$ANS" = "r" ]; then
                    rm -f $TXZ
                    $WGET -O $TXZ $PKGSERVER/$REMOTE
                fi

                if [ "$ANS" = "a" ]; then cleanup; fi
            else
                if [ ! "$(which gpg 2>/dev/null)" ]&&[ "$CHECKGPG" = "ON" ]; then
                    echo "gpg package not found"
                    echo "Please install the gpg package to check signatures and reenable"
                    echo "CHECKGPG in $CONF"
                    echo -n "(a)bort or (c)ontinue? "
                    read ANS <&1
                    
                    if [ "$ANS" != "c" ]; then cleanup; fi

                    echo "Continuing without gpg check..."
                    sed -i 's/CHECKGPG=.*/CHECKGPG=OFF/g' $CONF
                    $INSTALL $TXZ
                else
                    if [ "$CHECKGPG" = "ON" ]; then
                        echo "Checking gpg..."
                        # try to surpress the authority warning...
                        GPGOUT=$($GPG $TXZ.asc $TXZ 2>&1 | head -n2)

                        if [ -n "$(echo $GPGOUT | grep -i 'not found')" ]; then
                            echo "$GPGOUT"
                            echo "Did you import the Studioware key with 'studiopkg -g|gpg'?"
                            cleanup
                        elif [ -n "$(echo $GPGOUT | grep -i 'bad signature')" ]; then
                                echo "$GPGOUT"
                                cleanup
                        else
                            echo "$GPGOUT"
                            $INSTALL $TXZ
                        fi
                    else
                        $INSTALL $TXZ
                    fi
                fi
            fi
        done
    done < $PKGLIST
    cleanup
}
#}}}
#{{{ Check md5
xxmd5()
{
    echo -n "Checking md5sum..."
    if [ -z "$(grep -i "$1" "$CHECKSUMS"  | sed 's#./##' | md5sum -c - \
        2>&1 | grep WARNING)" ]; then \
        echo " OK"; return 0; fi
    echo " Bad md5sum"
    return 1
}
#}}}
#{{{ Import gpg key
importgpg()
{
    # ripped from slackpkg
    if ! [ -e ~/.gnupg ]; then
        mkdir ~/.gnupg
    fi

    cd $TMPROOT || cleanup
    $WGET -O gpgkey ${PKGSERVER}/GPG-KEY || cleanup
    gpg --yes --batch --delete-key "$STUDIOKEY"
    gpg --import gpgkey
    echo "Studioware GPG key added"
    cleanup
}
#}}}
#{{{ Search
search()
{
    cd $CACHEDIR || { echo "No cache exists! Did you run update?"; cleanup; }
    if [ ! -r $FILELIST ]; then { echo "No filelist! Did you run update?"; \
        cleanup; } fi
    for p in $(grep -i "$2" $FILELIST | grep txz | awk '{print $9}')
    do
        shortname=$(echo $p | cut -d'/' -f3 | rev | cut -d- -f4- | rev)
        dir=$(echo $p | cut -d'/' -f2) 
        installed=$(basename $(ls /var/log/packages/$shortname-*se* 2>/dev/null) \
            2>/dev/null | rev | cut -d- -f4- | rev)
#        version=$(basename $(ls /var/log/packages/$shortname-*se* 2>/dev/null) \
#            2>/dev/null | rev | cut -d- -f3 | rev)

        found=$(echo $p | cut -d'/' -f2-)

        in="[Not Installed]	$found"
        if [ "$shortname" = "$installed" ]; then 
            in="[Installed]	$found"; fi
        echo "$in"
    done
}
#}}}
#{{{ Delete Cache !DANGER WILL ROBINSON!
deletecache()
{
    cd $CACHEDIR || cleanup
    find . -name "*txz" -exec rm -f {} \;
    find . -name "*md5" -exec rm -f {} \;
    echo "Cache Deleted"
    cleanup
}
#}}}
init
getflags "$@"
