#!/bin/sh

#{{{ Copyright
# Studioware package building script
# Copyright 2011 David Woodfall <dave@dawoodfall.net>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#}}}
#{{{ Ini
init()
{
    APPNAME="sepkg"
    VERSION="3.6b2"
    CONFDIR=/etc/$APPNAME/
    mkdir -p $CONFDIR
    CONF=$CONFDIR/$APPNAME.conf
    touch $CONF
    source $CONF 
    TMP=${TMP:-/tmp/se}
    OUTPUT=${OUTPUT:-/tmp}
    TMPROOT=$(mktemp -d -p $OUTPUT $APPNAME-XXXXXX) || exit
    trap "cleanupbad" HUP INT ABRT QUIT SEGV TERM KILL PIPE STOP TSTP
    QUEUE=$TMPROOT/queue
    PKGLIST=$TMPROOT/pkglist
    WGET="wget --no-check-certificate"
    UP="upgradepkg --reinstall --install-new"
    MAINURL="http://www.studioware.org"
    TOOLURL="$MAINURL/files/tools/$APPNAME"
    SBSERVER="$MAINURL/files/slackbuilds/$SWVERSION"
    CACHEDIR=/var/cache/$APPNAME/$SWVERSION
    mkdir -p $CACHEDIR
    FILELIST=$CACHEDIR/SLACKBUILDS.TXT
    ERR="0"
}
#}}}
#{{{ Cleanup and exit
cleanup()
{
    rm -rf $TMPROOT
    exit 0
}
#}}}
#{{{ Cleanup and exit 1
cleanupbad()
{
    rm -rf $TMPROOT
    exit 1
}
#}}}
#{{{ Flags
getflags()
{
    if [ "$1" = "info" ]; then { info $2; cleanup; }; fi
    if [ "$1" = "-f" ]; then { info $2; cleanup; }; fi
    if [ "$1" = "update" ]; then { update; cleanup; }; fi
    if [ "$1" = "-u" ]; then { update; cleanup; }; fi
    if [ "$1" = "search" ]; then { search $2; cleanup; }; fi
    if [ "$1" = "-s" ]; then { search $2; cleanup; }; fi
    if [ "$1" = "build" ]; then { INSTALL=0; set_queue "$@"; cleanup; }; fi
    if [ "$1" = "-b" ]; then { INSTALL=0; set_queue "$@"; cleanup; }; fi
    if [ "$1" = "install" ]; then { INSTALL=1; set_queue "$@"; cleanup; }; fi
    if [ "$1" = "-i" ]; then { INSTALL=1; set_queue "$@"; cleanup; }; fi
    if [ "$1" = "delete-cache" ]; then { deletecache; cleanup; }; fi
    if [ "$1" = "latest" ]; then { latest; cleanup; }; fi
    if [ "$1" = "-l" ]; then { latest; cleanup; }; fi
    if [ "$1" = "read" ]; then { readme $2; cleanup; }; fi
    if [ "$1" = "-r" ]; then { readme $2; cleanup; }; fi
    if [ "$1" = "-q" ]; then { INSTALL=1; get_queue $2; cleanup; }; fi
    if [ "$1" = "queue" ]; then { INSTALL=1; get_queue $2; cleanup; }; fi
    if [ "$1" = "-h" ]; then {  usage; cleanup; }; fi
    if [ "$1" = "-v" ]; then { echo $APPNAME $VERSION; cleanup; }; fi
}
#}}}
#{{{ Info
info()
{
    APP=$1
    CAT=$(grep -wi $APP $FILELIST | cut -d/ -f2)
    info="$(curl -s $SBSERVER/$CAT/$APP/$APP.info)"
    echo "$info"
}
#}}}
#{{{ Readme
readme()
{
    file=$(grep -i $1.tar.gz $FILELIST | awk '{print $2}' | cut -d'/' -f1-3)/README
    shortname=$(echo $file | cut -d'/' -f5 | rev | cut -d- -f4- | rev)
    url=$SBSERVER/$file
    lynx -dump $url
    cleanup
}
#}}}
#{{{ Latest
latest()
{
    cd $TMPROOT
    
    LATEST=$(curl -s $TOOLURL/LATEST)
    REMVERS=$(echo $LATEST | cut -db -f1)
    REMBUILD=$(echo $LATEST | cut -db -f2)

    PKG=$APPNAME-$REMVERS-noarch-${REMBUILD}daw.txz
    MD5=$APPNAME-$REMVERS-noarch-${REMBUILD}daw.md5

    echo "Installed version: $VERSION. Latest version: $LATEST."

    if [ "$VERSION" != "$LATEST" ]; then
        echo -n "Newer version available. Download it? (y/n) "
        read REPLY

        if [ "$REPLY" = "y" ]; then
            $WGET -q -O $PKG $TOOLURL/$PKG
            $WGET -q -O $MD5 $TOOLURL/$MD5

            echo "Package saved to $TMPROOT"
            echo "Checking md5... "

            md5sum -c $MD5

            if [ $? != 0 ]; then
                cleanup
            fi

            echo
            echo -n "Upgrade now? (y/n) "
            read REPLY
            if [ "$REPLY" = "y" ]; then
                $UP $PKG
            fi
        fi
    fi
}
# }}}
#{{{ Usage
usage()
{
cat << EOF
$APPNAME $VERSION

Options

$APPNAME info/-f package1 - read info file
$APPNAME build/-b package1, package2 ... - build packages
$APPNAME delete-cache - delete all cached files
$APPNAME install/-i package1, package2 ... - build & install packages
$APPNAME install/-i < <queuefile> - install packages from file
$APPNAME latest/-l - checks for newer version of $APPNAME
$APPNAME read/-r <package> - download and print readme (needs lynx)
$APPNAME search/-s - search for package name or part name
$APPNAME update/-u - syncs with file server
$APPNAME queue/-q - download and install queue from file server
$APPNAME -h - help
$APPNAME -v - give version and exit

Files

/etc/$APPNAME/$APPNAME.conf

This file contains the mirror URL and should be edited for 32bit or 64bit.
EOF
}
#}}}
#{{{ Update
update()
{   
    cd $CACHEDIR || cleanup
    $WGET -O SLACKBUILDS.TXT $SBSERVER/SLACKBUILDS.TXT
    cleanup
}
#}}}
#{{{ Download Queue
get_queue()
{
    cd $CACHEDIR || { echo "No cache exists! Did you run update?"; cleanup; }
    if [ ! -r $FILELIST ]; then { echo "No filelist! Did you run update?"; \
        cleanup; } fi

    cd $TMPROOT || cleanup
    
    CAT=$(grep -wi $1 $FILELIST | cut -d/ -f2)
    APP=$(grep -wi $1 $FILELIST | cut -d/ -f3)

    curl -fs $SBSERVER/$CAT/$APP/$APP.sqf > $QUEUE 

    if [ $? != 0 ]; then
        curl -fs $SBSERVER/$1.sqf > $QUEUE 

        if [ $? != 0 ]; then
            echo "Queue not found."
            cleanup
        fi
    fi

    listpkgs
}
#}}}
#{{{ Set Queue
set_queue()
{
    cd $CACHEDIR || { echo "No cache exists! Did you run update?"; cleanup; }
    if [ ! -r $FILELIST ]; then { echo "No filelist! Did you run update?"; \
        cleanup; } fi

    cd $TMPROOT || cleanup
    shift

    cl=$*
    if [ -z "$cl" ]; then
        cat /dev/stdin | sed 's/,/\n/g;/^$/d' > $QUEUE 
    else
        echo $cl | sed 's/,/\n/g;/^$/d' > $QUEUE
    fi

    listpkgs
}
#}}}
#{{{ List Packages
listpkgs()
{
    exec <&1
    unset pkgs

    while read line
    do
        name=$(echo $line | awk '{print $1}')
        pkg=$(cat $FILELIST | cut -d'/' -f4 | grep -xi $name.tar.gz)
        pkgs=$pkgs" "$pkg
    done < $QUEUE

    for i in $pkgs
    do
        shortname=$(echo $i | cut -d'.' -f1)
        if [ -n "$i" ]; then
            INSTALLLIST=$INSTALLLIST" "$i" "$shortname" ""on "
        fi
    done

    if [ -z "$INSTALLLIST" ]; then cleanup; fi

    dialog --separate-output --title install --backtitle "$APPNAME $VERSION" \
        --checklist "Choose packages to install:" \
        19 70 13 $INSTALLLIST 2>$PKGLIST
    if [ $? -ne 0 ]; then cleanup; fi
    if [ -z "$(cat $PKGLIST)" ]; then cleanup; fi
    #cat $QUEUE > $PKGLIST
    installpkgs
}
#}}}
#{{{ Install Packages
installpkgs()
{
    cd $TMPROOT || cleanup
    unset pkgs

    for i in $(cat $PKGLIST)
    do
        pkgs=$pkgs" "$(grep -wie "\/.*\/$i" $FILELIST | awk '{print $2}')
    done

    for i in $pkgs
    do
        if [ -n "$i" ]; then
            b=$(basename $i .tar.gz)
            $WGET -c -O $b.tar.gz $SBSERVER/$i
            tar xf $b.tar.gz
            (
            cd $b
            source ./$b.info        
            unset loop
            MD5SUM=($MD5SUM)

            for D in $DOWNLOAD
            do
                LOCAL=$(basename $D)
                MD5=${MD5SUM[loop]}
                unset MD5MATCH

                while [ -z "$MD5MATCH" ]
                do
                    if [ ! -r $CACHEDIR/$LOCAL ]; then
                        $WGET -c -O $CACHEDIR/$LOCAL $D
                    fi
                    
                    ln -sf $CACHEDIR/$LOCAL $LOCAL

                    if [ "$(md5sum $LOCAL | awk '{print $1}')" != "$MD5" ]; then 
                        echo "Checksums don't match."
                        echo -n "(A)bort (C)ontinue (R)edownload "
                        read ANS
                        if [[ "$ANS" = [rR] ]]; then 
                            rm -r $CACHEDIR/$LOCAL
                        elif [[ "$ANS" = [cC] ]]; then
                            break
                        else exit 1
                        fi
                    else MD5MATCH=1
                    fi
                done
                let loop=$loop+1
            done

            options=$(grep -x $b $QUEUE | cut -f2- | sed "s/$b//")
            eval $options source ./$b.SlackBuild
            if [ "$INSTALL" = "1" ]; then
                $UP $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
            fi
            if [ -n "$ARCHIVE" ]; then
                mv $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz} $ARCHIVE
            fi
            )
            ERR=$?

            if [ "$ERR" != "0" ]; then
                break
            fi
        fi
    done

    if [ "$ERR" != "0" ]; then
        cleanupbad
    fi

    cleanup
}
#}}}
#{{{ Search
search()
{
    cd $CACHEDIR || { echo "No cache exists! Did you run update?"; cleanup; }
    if [ ! -r $FILELIST ]; then { echo "No filelist! Did you run update?"; \
        cleanup; } fi

    inrepo=$(grep -i $1 $FILELIST | awk '{print $2}')

    if [ -n "$inrepo" ]; then
        for g in $inrepo
        do
            shortname=$(echo $g | cut -d'/' -f3)
            dir=$(echo $g | cut -d'/' -f2)
            installed=$(ls /var/log/packages/$shortname-[0-9]* 2>/dev/null)

            if [ -e "$installed" ]; then 
                version=$(echo $installed | cut -d'/' -f5 | rev | cut -d- -f3 \
                    | rev)
                echo "[Installed]	$dir/$(echo $installed | cut -d'/' -f5)"
            else echo "[Not Installed]	$dir/$shortname"
            fi
        done
    fi
}
#}}}
#{{{ Delete Cache !DANGER WILL ROBINSON!
deletecache()
{
    cd $CACHEDIR || cleanup
    find . -name *.{gz,bz2,tgz,txz,xz} -exec rm -f {} \;
    echo "Cache Deleted"
    cleanup
}
#}}}
init
getflags "$@"
